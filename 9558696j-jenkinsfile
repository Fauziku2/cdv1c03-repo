pipeline {
    agent any
    stages {
        stage('ST1-9558696j') {
            steps {
                echo "ST1-9558696j: Setup Release Environment Completed."
            }
        }

        stage('ST2-9558696j') {
            steps {
                sh '''
                    docker rm -f server1-9558696j || true
                    docker run -dit -p 32700:80 --name server1-9558696j svr-image-9558696j
                '''
                echo "ST2-9558696j: Server1 is successfully created"
            }
        }

        stage('ST3-9558696j') {
            steps {
                sh 'docker exec server1-9558696j service apache2 status || true'
                echo "ST3-9558696j: Server1 is healthy â€“ Health check done"
            }
        }

        stage('ST4-Parallel-9558696j') {
            parallel {
                stage('ST4A-9558696j') {
                    steps {
                        echo "ST4A-9558696j: SQLI Check Completed"
                    }
                }
                stage('ST4B-9558696j') {
                    steps {
                        echo "ST4B-9558696j: XSS Check Completed"
                    }
                }
            }
        }

        stage('ST5-9558696j') {
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Continue the pipeline?',
                        parameters: [
                            choice(name: 'Action', choices: ['Proceed', 'Abort'], description: 'Select to continue or stop the pipeline')
                        ]
                    )

                    if (userInput == 'Proceed') {
                        echo "ST5-9558696j : Continue the pipeline."
                    } else {
                        error "ST5-9558696j : Pipeline aborted by user."
                    }
                }
            }
        }

        stage('ST6-9558696j') {
            steps {
                echo "ST6-9558696j : Ready for next phase"
            }
        }
    }
}

